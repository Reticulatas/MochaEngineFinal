/*-----------------------------------------------------------------
----- © 2014 DigiPen Corporation (USA), All Rights Reserved -----
-----------------------------------------------------------------
-* Original Author: Kai Chuan Hsiao
-* Physics Engine Kai
-* See Footer for Revisions                                      */

#pragma once
#include "Collidar.h"
#include "InList.h"
#include "TimeStep.h"
#include "RayCastResult.h"

class PhysicsDebugDraw;
class Broadphase;

struct ColliderPair
{
	friend class Broadphase;
public:
	// links to other pairs generated by the same broadphase
	IN_LIST_LINK(ColliderPair) mSiblingLink;
	Collider *mCollider1;
	Collider *mCollider2;
private:
	ColliderPair(Collider *c1, Collider *c2)
		: mCollider1(c1)
		, mCollider2(c2)
	{ }
};

typedef IN_LIST(ColliderPair, mSiblingLink) ColliderPairList;

class Broadphase 
{
public:

	typedef std::vector<Collider *> PickResult;

	Broadphase(void)
		: mPairAllocator(sizeof(ColliderPair))
	{ }

	virtual ~Broadphase(void) { }
	virtual void Update(const TimeStep &timeStep) { }
	virtual const RayCastResult RayCast(const Ray3 &ray, float maxDistance) = 0;
	virtual void QueryRegion(const Proxy &proxy, std::vector<Collider *> &result) = 0;
	virtual void Pick(const Math::Vector3 &pos, PickResult &result) = 0;
	virtual ColliderPairList &ComputePairs(void) = 0;
	virtual void Draw(PhysicsDebugDraw &debugDraw) { }

	__forceinline void Add(Proxy &proxy)
	{
		mProxyList.push_back(&proxy);
		HandleAdd(proxy);
	}
	__forceinline void Remove(Proxy &proxy)
	{
		mProxyList.erase(&proxy);
		HandleRemove(proxy);
	}

	void Transfer(Broadphase &dest)
	{
		while (!mProxyList.empty())
		{
			Proxy &proxy = *mProxyList.begin();
			Remove(proxy);
			dest.Add(proxy);
		}
	}

protected:

	virtual void HandleAdd(Proxy &proxy) = 0;
	virtual void HandleRemove(Proxy &proxy) = 0;

	__forceinline void FreePair(ColliderPair *pair)
	{
		pair->~ColliderPair();
		mPairAllocator.Free(pair);
	}

	__forceinline ColliderPair *AllocatePair(Collider *c1, Collider *c2)
	{
		return new (mPairAllocator.Allocate()) ColliderPair(c1, c2);
	}





private:
	FixedSizeAllocator mPairAllocator;
	IN_LIST(Proxy, broadphaseLink) mProxyList; 
};