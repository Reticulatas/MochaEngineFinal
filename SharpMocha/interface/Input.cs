/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class Input : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Input(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Input obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static float GetReleased(int playerIndex, string inputName) {
    float ret = SharpMochaPINVOKE.Input_GetReleased(playerIndex, inputName);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float GetTriggered(int playerIndex, string inputName) {
    float ret = SharpMochaPINVOKE.Input_GetTriggered(playerIndex, inputName);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float GetHeld(int playerIndex, string inputName) {
    float ret = SharpMochaPINVOKE.Input_GetHeld(playerIndex, inputName);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static float GetValue(int playerIndex, string inputName) {
    float ret = SharpMochaPINVOKE.Input_GetValue(playerIndex, inputName);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int GetMouseX(bool gameWnd) {
    int ret = SharpMochaPINVOKE.Input_GetMouseX(gameWnd);
    return ret;
  }

  public static int GetMouseY(bool gameWnd) {
    int ret = SharpMochaPINVOKE.Input_GetMouseY(gameWnd);
    return ret;
  }

  public static int GetMouseDeltaX() {
    int ret = SharpMochaPINVOKE.Input_GetMouseDeltaX();
    return ret;
  }

  public static int GetMouseDeltaY() {
    int ret = SharpMochaPINVOKE.Input_GetMouseDeltaY();
    return ret;
  }

  public static int GetMouseWheelDeltaY() {
    int ret = SharpMochaPINVOKE.Input_GetMouseWheelDeltaY();
    return ret;
  }

  public static void SetMouseLock(bool val) {
    SharpMochaPINVOKE.Input_SetMouseLock(val);
  }

  public static bool GetLockMouse() {
    bool ret = SharpMochaPINVOKE.Input_GetLockMouse();
    return ret;
  }

  public static void SetMouseVisible(bool val) {
    SharpMochaPINVOKE.Input_SetMouseVisible(val);
  }

  public static bool GetMouseVisible() {
    bool ret = SharpMochaPINVOKE.Input_GetMouseVisible();
    return ret;
  }

  public static bool GetIsMouseInWindow(bool gameWnd) {
    bool ret = SharpMochaPINVOKE.Input_GetIsMouseInWindow(gameWnd);
    return ret;
  }

  public static bool IsPlayerUsingKeyboard(int playerIndex) {
    bool ret = SharpMochaPINVOKE.Input_IsPlayerUsingKeyboard(playerIndex);
    return ret;
  }

  public static bool GetCtrlAltDel() {
    bool ret = SharpMochaPINVOKE.Input_GetCtrlAltDel();
    return ret;
  }

}

}
