/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class AssetHandle : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal AssetHandle(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AssetHandle obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~AssetHandle() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SharpMochaPINVOKE.delete_AssetHandle(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public AssetHandle(Asset rawPtr) : this(SharpMochaPINVOKE.new_AssetHandle__SWIG_0(Asset.getCPtr(rawPtr)), true) {
  }

  public AssetHandle(AssetHandle rhs) : this(SharpMochaPINVOKE.new_AssetHandle__SWIG_1(AssetHandle.getCPtr(rhs)), true) {
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public AssetHandle() : this(SharpMochaPINVOKE.new_AssetHandle__SWIG_2(), true) {
  }

  public bool Valid() {
    bool ret = SharpMochaPINVOKE.AssetHandle_Valid(swigCPtr);
    return ret;
  }

  public void ResetHandle() {
    SharpMochaPINVOKE.AssetHandle_ResetHandle(swigCPtr);
  }

  public uint GetId() {
    uint ret = SharpMochaPINVOKE.AssetHandle_GetId(swigCPtr);
    return ret;
  }

  public string GetName() {
    string ret = SharpMochaPINVOKE.AssetHandle_GetName(swigCPtr);
    return ret;
  }

  public Asset GetRawAssetPtr() {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.AssetHandle_GetRawAssetPtr(swigCPtr);
    Asset ret = (cPtr == global::System.IntPtr.Zero) ? null : new Asset(cPtr, false);
    return ret;
  }

  public string GetUnderlyingAssetType() {
    string ret = SharpMochaPINVOKE.AssetHandle_GetUnderlyingAssetType(swigCPtr);
    return ret;
  }

}

}
