/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class CShadowProbe : Component {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CShadowProbe(global::System.IntPtr cPtr, bool cMemoryOwn) : base(SharpMochaPINVOKE.CShadowProbe_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CShadowProbe obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public bool mStatic {
    set {
      SharpMochaPINVOKE.CShadowProbe_mStatic_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.CShadowProbe_mStatic_get(swigCPtr);
      return ret;
    } 
  }

  public float mStrength {
    set {
      SharpMochaPINVOKE.CShadowProbe_mStrength_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CShadowProbe_mStrength_get(swigCPtr);
      return ret;
    } 
  }

  public float mBias {
    set {
      SharpMochaPINVOKE.CShadowProbe_mBias_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CShadowProbe_mBias_get(swigCPtr);
      return ret;
    } 
  }

  public bool mUseSoftShadows {
    set {
      SharpMochaPINVOKE.CShadowProbe_mUseSoftShadows_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.CShadowProbe_mUseSoftShadows_get(swigCPtr);
      return ret;
    } 
  }

  public float mNearZ {
    set {
      SharpMochaPINVOKE.CShadowProbe_mNearZ_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CShadowProbe_mNearZ_get(swigCPtr);
      return ret;
    } 
  }

  public float mFarZ {
    set {
      SharpMochaPINVOKE.CShadowProbe_mFarZ_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CShadowProbe_mFarZ_get(swigCPtr);
      return ret;
    } 
  }

}

}
