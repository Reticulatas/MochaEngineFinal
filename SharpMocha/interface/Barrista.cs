/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class Barrista : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Barrista(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Barrista obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public partial class operation_info : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal operation_info(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(operation_info obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~operation_info() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            SharpMochaPINVOKE.delete_Barrista_operation_info(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public uint line {
      set {
        SharpMochaPINVOKE.Barrista_operation_info_line_set(swigCPtr, value);
      } 
      get {
        uint ret = SharpMochaPINVOKE.Barrista_operation_info_line_get(swigCPtr);
        return ret;
      } 
    }
  
    public long samples_num {
      set {
        SharpMochaPINVOKE.Barrista_operation_info_samples_num_set(swigCPtr, value);
      } 
      get {
        long ret = SharpMochaPINVOKE.Barrista_operation_info_samples_num_get(swigCPtr);
        return ret;
      } 
    }
  
    public long samples_sum {
      set {
        SharpMochaPINVOKE.Barrista_operation_info_samples_sum_set(swigCPtr, value);
      } 
      get {
        long ret = SharpMochaPINVOKE.Barrista_operation_info_samples_sum_get(swigCPtr);
        return ret;
      } 
    }
  
    public string name {
      set {
        SharpMochaPINVOKE.Barrista_operation_info_name_set(swigCPtr, value);
        if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        string ret = SharpMochaPINVOKE.Barrista_operation_info_name_get(swigCPtr);
        if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public operation_info() : this(SharpMochaPINVOKE.new_Barrista_operation_info(), true) {
    }
  
  }

  public OperationList Schedule_Generate() {
    OperationList ret = new OperationList(SharpMochaPINVOKE.Barrista_Schedule_Generate(swigCPtr), true);
    return ret;
  }

  public static Barrista getInstance() {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.Barrista_getInstance();
    Barrista ret = (cPtr == global::System.IntPtr.Zero) ? null : new Barrista(cPtr, false);
    return ret;
  }

}

}
