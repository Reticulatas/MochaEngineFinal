/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class Material : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Material(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Material obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public virtual void SetTexture(string textureName) {
    SharpMochaPINVOKE.Material_SetTexture(swigCPtr, textureName);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTextureOffset(SWIGTYPE_p_Vector2 uvOffset, int textureIndex) {
    SharpMochaPINVOKE.Material_SetTextureOffset(swigCPtr, SWIGTYPE_p_Vector2.getCPtr(uvOffset), textureIndex);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTextureScale(SWIGTYPE_p_Vector2 uvScale, int textureIndex) {
    SharpMochaPINVOKE.Material_SetTextureScale(swigCPtr, SWIGTYPE_p_Vector2.getCPtr(uvScale), textureIndex);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetTextureWidth(uint textureIndex) {
    uint ret = SharpMochaPINVOKE.Material_GetTextureWidth(swigCPtr, textureIndex);
    return ret;
  }

  public uint GetTextureHeight(uint textureIndex) {
    uint ret = SharpMochaPINVOKE.Material_GetTextureHeight(swigCPtr, textureIndex);
    return ret;
  }

  public float GetColorAlpha() {
    float ret = SharpMochaPINVOKE.Material_GetColorAlpha(swigCPtr);
    return ret;
  }

  public void SetColorAlpha(float alpha) {
    SharpMochaPINVOKE.Material_SetColorAlpha(swigCPtr, alpha);
  }

  public void SetColor(Color col) {
    SharpMochaPINVOKE.Material_SetColor__SWIG_0(swigCPtr, Color.getCPtr(col));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetColor(float r, float g, float b, float a) {
    SharpMochaPINVOKE.Material_SetColor__SWIG_1(swigCPtr, r, g, b, a);
  }

  public void SetColor(float r, float g, float b) {
    SharpMochaPINVOKE.Material_SetColor__SWIG_2(swigCPtr, r, g, b);
  }

  public Color GetColor() {
    Color ret = new Color(SharpMochaPINVOKE.Material_GetColor(swigCPtr), true);
    return ret;
  }

  public MaterialImpl mMaterialData {
    set {
      SharpMochaPINVOKE.Material_mMaterialData_set(swigCPtr, MaterialImpl.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.Material_mMaterialData_get(swigCPtr);
      MaterialImpl ret = (cPtr == global::System.IntPtr.Zero) ? null : new MaterialImpl(cPtr, false);
      return ret;
    } 
  }

}

}
