/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class CPhysics : Component {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CPhysics(global::System.IntPtr cPtr, bool cMemoryOwn) : base(SharpMochaPINVOKE.CPhysics_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CPhysics obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public void AddForce(MochaVec4 force) {
    SharpMochaPINVOKE.CPhysics_AddForce__SWIG_0(swigCPtr, MochaVec4.getCPtr(force));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVelocity(MochaVec4 velocity) {
    SharpMochaPINVOKE.CPhysics_SetVelocity__SWIG_0(swigCPtr, MochaVec4.getCPtr(velocity));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAnguVelocity(float angu) {
    SharpMochaPINVOKE.CPhysics_SetAnguVelocity(swigCPtr, angu);
  }

  public void SetPosition(MochaVec4 position) {
    SharpMochaPINVOKE.CPhysics_SetPosition(swigCPtr, MochaVec4.getCPtr(position));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStatus(bool switcher) {
    SharpMochaPINVOKE.CPhysics_SetStatus(swigCPtr, switcher);
  }

  public void SetIsControl(bool switcher) {
    SharpMochaPINVOKE.CPhysics_SetIsControl(swigCPtr, switcher);
  }

  public void SetIsForceActive(bool switcher) {
    SharpMochaPINVOKE.CPhysics_SetIsForceActive(swigCPtr, switcher);
  }

  public int GetCOllisionID() {
    int ret = SharpMochaPINVOKE.CPhysics_GetCOllisionID(swigCPtr);
    return ret;
  }

  public bool GetIsStatic() {
    bool ret = SharpMochaPINVOKE.CPhysics_GetIsStatic(swigCPtr);
    return ret;
  }

  public float GetOffSetX() {
    float ret = SharpMochaPINVOKE.CPhysics_GetOffSetX(swigCPtr);
    return ret;
  }

  public float GetOffSetY() {
    float ret = SharpMochaPINVOKE.CPhysics_GetOffSetY(swigCPtr);
    return ret;
  }

  public MochaVec4 GetAcceleration() {
    MochaVec4 ret = new MochaVec4(SharpMochaPINVOKE.CPhysics_GetAcceleration(swigCPtr), false);
    return ret;
  }

  public MochaVec4 GetVelocity() {
    MochaVec4 ret = new MochaVec4(SharpMochaPINVOKE.CPhysics_GetVelocity(swigCPtr), false);
    return ret;
  }

  public MochaVec4 GetPosition() {
    MochaVec4 ret = new MochaVec4(SharpMochaPINVOKE.CPhysics_GetPosition(swigCPtr), false);
    return ret;
  }

  public MochaVec4 GetPrevPosition() {
    MochaVec4 ret = new MochaVec4(SharpMochaPINVOKE.CPhysics_GetPrevPosition(swigCPtr), false);
    return ret;
  }

  public MochaVec4 GetForce() {
    MochaVec4 ret = new MochaVec4(SharpMochaPINVOKE.CPhysics_GetForce(swigCPtr), false);
    return ret;
  }

  public void SetMass(float mass) {
    SharpMochaPINVOKE.CPhysics_SetMass(swigCPtr, mass);
  }

  public void SetInertia(float mass) {
    SharpMochaPINVOKE.CPhysics_SetInertia(swigCPtr, mass);
  }

  public void SetFriction(float friction) {
    SharpMochaPINVOKE.CPhysics_SetFriction(swigCPtr, friction);
  }

  public void SetRestitution(float res) {
    SharpMochaPINVOKE.CPhysics_SetRestitution(swigCPtr, res);
  }

  public void AddForce(float x, float y, float z) {
    SharpMochaPINVOKE.CPhysics_AddForce__SWIG_1(swigCPtr, x, y, z);
  }

  public void SetRotation(float val) {
    SharpMochaPINVOKE.CPhysics_SetRotation(swigCPtr, val);
  }

  public void SetIsSleep(bool switcher) {
    SharpMochaPINVOKE.CPhysics_SetIsSleep(swigCPtr, switcher);
  }

  public void SetForceToZero() {
    SharpMochaPINVOKE.CPhysics_SetForceToZero(swigCPtr);
  }

  public float GetAngVelocity() {
    float ret = SharpMochaPINVOKE.CPhysics_GetAngVelocity(swigCPtr);
    return ret;
  }

  public float GetInertia() {
    float ret = SharpMochaPINVOKE.CPhysics_GetInertia(swigCPtr);
    return ret;
  }

  public float GetInvInertia() {
    float ret = SharpMochaPINVOKE.CPhysics_GetInvInertia(swigCPtr);
    return ret;
  }

  public float GetMass() {
    float ret = SharpMochaPINVOKE.CPhysics_GetMass(swigCPtr);
    return ret;
  }

  public float GetInverseMass() {
    float ret = SharpMochaPINVOKE.CPhysics_GetInverseMass(swigCPtr);
    return ret;
  }

  public float GetFriction() {
    float ret = SharpMochaPINVOKE.CPhysics_GetFriction(swigCPtr);
    return ret;
  }

  public float GetRotation() {
    float ret = SharpMochaPINVOKE.CPhysics_GetRotation(swigCPtr);
    return ret;
  }

  public float GetRestitution() {
    float ret = SharpMochaPINVOKE.CPhysics_GetRestitution(swigCPtr);
    return ret;
  }

  public bool GetStatus() {
    bool ret = SharpMochaPINVOKE.CPhysics_GetStatus(swigCPtr);
    return ret;
  }

  public bool GetIsControl() {
    bool ret = SharpMochaPINVOKE.CPhysics_GetIsControl(swigCPtr);
    return ret;
  }

  public bool GetIsCollision() {
    bool ret = SharpMochaPINVOKE.CPhysics_GetIsCollision(swigCPtr);
    return ret;
  }

  public bool GetIsSleep() {
    bool ret = SharpMochaPINVOKE.CPhysics_GetIsSleep(swigCPtr);
    return ret;
  }

  public void SetVelocity(float x, float y, float z) {
    SharpMochaPINVOKE.CPhysics_SetVelocity__SWIG_1(swigCPtr, x, y, z);
  }

  public void ClearAcceYtoZero() {
    SharpMochaPINVOKE.CPhysics_ClearAcceYtoZero(swigCPtr);
  }

  public int mCollisionID {
    set {
      SharpMochaPINVOKE.CPhysics_mCollisionID_set(swigCPtr, value);
    } 
    get {
      int ret = SharpMochaPINVOKE.CPhysics_mCollisionID_get(swigCPtr);
      return ret;
    } 
  }

  public int mColliderType {
    set {
      SharpMochaPINVOKE.CPhysics_mColliderType_set(swigCPtr, value);
    } 
    get {
      int ret = SharpMochaPINVOKE.CPhysics_mColliderType_get(swigCPtr);
      return ret;
    } 
  }

  public bool mIsTriggered {
    set {
      SharpMochaPINVOKE.CPhysics_mIsTriggered_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.CPhysics_mIsTriggered_get(swigCPtr);
      return ret;
    } 
  }

  public bool mIsGravityOn {
    set {
      SharpMochaPINVOKE.CPhysics_mIsGravityOn_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.CPhysics_mIsGravityOn_get(swigCPtr);
      return ret;
    } 
  }

  public bool mIsRotation {
    set {
      SharpMochaPINVOKE.CPhysics_mIsRotation_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.CPhysics_mIsRotation_get(swigCPtr);
      return ret;
    } 
  }

  public bool mLockOnX {
    set {
      SharpMochaPINVOKE.CPhysics_mLockOnX_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.CPhysics_mLockOnX_get(swigCPtr);
      return ret;
    } 
  }

  public bool mLockOnY {
    set {
      SharpMochaPINVOKE.CPhysics_mLockOnY_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.CPhysics_mLockOnY_get(swigCPtr);
      return ret;
    } 
  }

  public bool mLockOnZ {
    set {
      SharpMochaPINVOKE.CPhysics_mLockOnZ_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.CPhysics_mLockOnZ_get(swigCPtr);
      return ret;
    } 
  }

  public float mFriction {
    set {
      SharpMochaPINVOKE.CPhysics_mFriction_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CPhysics_mFriction_get(swigCPtr);
      return ret;
    } 
  }

  public float mRestitution {
    set {
      SharpMochaPINVOKE.CPhysics_mRestitution_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CPhysics_mRestitution_get(swigCPtr);
      return ret;
    } 
  }

  public MochaVec3 mGravityFactor {
    set {
      SharpMochaPINVOKE.CPhysics_mGravityFactor_set(swigCPtr, MochaVec3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.CPhysics_mGravityFactor_get(swigCPtr);
      MochaVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new MochaVec3(cPtr, false);
      return ret;
    } 
  }

  public float mMass {
    set {
      SharpMochaPINVOKE.CPhysics_mMass_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CPhysics_mMass_get(swigCPtr);
      return ret;
    } 
  }

  public RigidBodyComponent rigidCom {
    set {
      SharpMochaPINVOKE.CPhysics_rigidCom_set(swigCPtr, RigidBodyComponent.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.CPhysics_rigidCom_get(swigCPtr);
      RigidBodyComponent ret = (cPtr == global::System.IntPtr.Zero) ? null : new RigidBodyComponent(cPtr, false);
      return ret;
    } 
  }

  public ColliderComponent collidarCom {
    set {
      SharpMochaPINVOKE.CPhysics_collidarCom_set(swigCPtr, ColliderComponent.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.CPhysics_collidarCom_get(swigCPtr);
      ColliderComponent ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColliderComponent(cPtr, false);
      return ret;
    } 
  }

}

}
