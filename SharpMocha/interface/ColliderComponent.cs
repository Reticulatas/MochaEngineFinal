/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class ColliderComponent : Component {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ColliderComponent(global::System.IntPtr cPtr, bool cMemoryOwn) : base(SharpMochaPINVOKE.ColliderComponent_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ColliderComponent obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public SWIGTYPE_p_Collider GetCollider() {
    SWIGTYPE_p_Collider ret = new SWIGTYPE_p_Collider(SharpMochaPINVOKE.ColliderComponent_GetCollider(swigCPtr), false);
    return ret;
  }

  public partial class ContactRecord : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal ContactRecord(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ContactRecord obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            throw new global::System.MethodAccessException("C++ destructor does not have public access");
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public byte numContacts {
      set {
        SharpMochaPINVOKE.ColliderComponent_ContactRecord_numContacts_set(swigCPtr, value);
      } 
      get {
        byte ret = SharpMochaPINVOKE.ColliderComponent_ContactRecord_numContacts_get(swigCPtr);
        return ret;
      } 
    }
  
      public partial class Contact : global::System.IDisposable {
        private global::System.Runtime.InteropServices.HandleRef swigCPtr;
        protected bool swigCMemOwn;
      
        internal Contact(global::System.IntPtr cPtr, bool cMemoryOwn) {
          swigCMemOwn = cMemoryOwn;
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
        }
      
        internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Contact obj) {
          return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
        }
      
        ~Contact() {
          Dispose();
        }
      
        public virtual void Dispose() {
          lock(this) {
            if (swigCPtr.Handle != global::System.IntPtr.Zero) {
              if (swigCMemOwn) {
                swigCMemOwn = false;
                SharpMochaPINVOKE.delete_ColliderComponent_ContactRecord_Contact(swigCPtr);
              }
              swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
            }
            global::System.GC.SuppressFinalize(this);
          }
        }
      
        public MochaVec3 position {
          set {
            SharpMochaPINVOKE.ColliderComponent_ContactRecord_Contact_position_set(swigCPtr, MochaVec3.getCPtr(value));
          } 
          get {
            global::System.IntPtr cPtr = SharpMochaPINVOKE.ColliderComponent_ContactRecord_Contact_position_get(swigCPtr);
            MochaVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new MochaVec3(cPtr, false);
            return ret;
          } 
        }
      
        public MochaVec3 normal {
          set {
            SharpMochaPINVOKE.ColliderComponent_ContactRecord_Contact_normal_set(swigCPtr, MochaVec3.getCPtr(value));
          } 
          get {
            global::System.IntPtr cPtr = SharpMochaPINVOKE.ColliderComponent_ContactRecord_Contact_normal_get(swigCPtr);
            MochaVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new MochaVec3(cPtr, false);
            return ret;
          } 
        }
      
        public float penetration {
          set {
            SharpMochaPINVOKE.ColliderComponent_ContactRecord_Contact_penetration_set(swigCPtr, value);
          } 
          get {
            float ret = SharpMochaPINVOKE.ColliderComponent_ContactRecord_Contact_penetration_get(swigCPtr);
            return ret;
          } 
        }
      
        public MochaVec3 normalRelativeVelocity {
          set {
            SharpMochaPINVOKE.ColliderComponent_ContactRecord_Contact_normalRelativeVelocity_set(swigCPtr, MochaVec3.getCPtr(value));
          } 
          get {
            global::System.IntPtr cPtr = SharpMochaPINVOKE.ColliderComponent_ContactRecord_Contact_normalRelativeVelocity_get(swigCPtr);
            MochaVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new MochaVec3(cPtr, false);
            return ret;
          } 
        }
      
        public MochaVec3 tangentRelativeVelocity {
          set {
            SharpMochaPINVOKE.ColliderComponent_ContactRecord_Contact_tangentRelativeVelocity_set(swigCPtr, MochaVec3.getCPtr(value));
          } 
          get {
            global::System.IntPtr cPtr = SharpMochaPINVOKE.ColliderComponent_ContactRecord_Contact_tangentRelativeVelocity_get(swigCPtr);
            MochaVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new MochaVec3(cPtr, false);
            return ret;
          } 
        }
      
        public MochaVec3 normalImpulse {
          set {
            SharpMochaPINVOKE.ColliderComponent_ContactRecord_Contact_normalImpulse_set(swigCPtr, MochaVec3.getCPtr(value));
          } 
          get {
            global::System.IntPtr cPtr = SharpMochaPINVOKE.ColliderComponent_ContactRecord_Contact_normalImpulse_get(swigCPtr);
            MochaVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new MochaVec3(cPtr, false);
            return ret;
          } 
        }
      
        public MochaVec3 tangentImpulse {
          set {
            SharpMochaPINVOKE.ColliderComponent_ContactRecord_Contact_tangentImpulse_set(swigCPtr, MochaVec3.getCPtr(value));
          } 
          get {
            global::System.IntPtr cPtr = SharpMochaPINVOKE.ColliderComponent_ContactRecord_Contact_tangentImpulse_get(swigCPtr);
            MochaVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new MochaVec3(cPtr, false);
            return ret;
          } 
        }
      
        public Contact() : this(SharpMochaPINVOKE.new_ColliderComponent_ContactRecord_Contact(), true) {
        }
      
      }
  
    public ColliderComponent.ContactRecord.Contact contacts {
      set {
        SharpMochaPINVOKE.ColliderComponent_ContactRecord_contacts_set(swigCPtr, ColliderComponent.ContactRecord.Contact.getCPtr(value));
      } 
      get {
        global::System.IntPtr cPtr = SharpMochaPINVOKE.ColliderComponent_ContactRecord_contacts_get(swigCPtr);
        ColliderComponent.ContactRecord.Contact ret = (cPtr == global::System.IntPtr.Zero) ? null : new ColliderComponent.ContactRecord.Contact(cPtr, false);
        return ret;
      } 
    }
  
    public bool wasColliding {
      set {
        SharpMochaPINVOKE.ColliderComponent_ContactRecord_wasColliding_set(swigCPtr, value);
      } 
      get {
        bool ret = SharpMochaPINVOKE.ColliderComponent_ContactRecord_wasColliding_get(swigCPtr);
        return ret;
      } 
    }
  
    public bool isColliding {
      set {
        SharpMochaPINVOKE.ColliderComponent_ContactRecord_isColliding_set(swigCPtr, value);
      } 
      get {
        bool ret = SharpMochaPINVOKE.ColliderComponent_ContactRecord_isColliding_get(swigCPtr);
        return ret;
      } 
    }
  
    public ColliderComponent Other() {
      ColliderComponent ret = new ColliderComponent(SharpMochaPINVOKE.ColliderComponent_ContactRecord_Other(swigCPtr), false);
      return ret;
    }
  
  }

  public void SetMass(float mass) {
    SharpMochaPINVOKE.ColliderComponent_SetMass(swigCPtr, mass);
  }

  public SWIGTYPE_p_Collider mCollider {
    set {
      SharpMochaPINVOKE.ColliderComponent_mCollider_set(swigCPtr, SWIGTYPE_p_Collider.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.ColliderComponent_mCollider_get(swigCPtr);
      SWIGTYPE_p_Collider ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Collider(cPtr, false);
      return ret;
    } 
  }

}

}
