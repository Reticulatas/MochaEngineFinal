/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class CStreamZone : Component {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CStreamZone(global::System.IntPtr cPtr, bool cMemoryOwn) : base(SharpMochaPINVOKE.CStreamZone_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CStreamZone obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public IZone zone {
    set {
      SharpMochaPINVOKE.CStreamZone_zone_set(swigCPtr, IZone.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.CStreamZone_zone_get(swigCPtr);
      IZone ret = (cPtr == global::System.IntPtr.Zero) ? null : new IZone(cPtr, false);
      return ret;
    } 
  }

  public string mapZoneId {
    set {
      SharpMochaPINVOKE.CStreamZone_mapZoneId_set(swigCPtr, value);
      if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = SharpMochaPINVOKE.CStreamZone_mapZoneId_get(swigCPtr);
      if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public CStreamZone.StreamMode mode {
    set {
      SharpMochaPINVOKE.CStreamZone_mode_set(swigCPtr, (int)value);
    } 
    get {
      CStreamZone.StreamMode ret = (CStreamZone.StreamMode)SharpMochaPINVOKE.CStreamZone_mode_get(swigCPtr);
      return ret;
    } 
  }

  public string fileToStream {
    set {
      SharpMochaPINVOKE.CStreamZone_fileToStream_set(swigCPtr, value);
      if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = SharpMochaPINVOKE.CStreamZone_fileToStream_get(swigCPtr);
      if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool forceZoneUnusableAfterStream {
    set {
      SharpMochaPINVOKE.CStreamZone_forceZoneUnusableAfterStream_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.CStreamZone_forceZoneUnusableAfterStream_get(swigCPtr);
      return ret;
    } 
  }

  public bool useOffsetFromThisPos {
    set {
      SharpMochaPINVOKE.CStreamZone_useOffsetFromThisPos_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.CStreamZone_useOffsetFromThisPos_get(swigCPtr);
      return ret;
    } 
  }

  public MochaVec3 offset {
    set {
      SharpMochaPINVOKE.CStreamZone_offset_set(swigCPtr, MochaVec3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.CStreamZone_offset_get(swigCPtr);
      MochaVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new MochaVec3(cPtr, false);
      return ret;
    } 
  }

  public bool mUseMarkers {
    set {
      SharpMochaPINVOKE.CStreamZone_mUseMarkers_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.CStreamZone_mUseMarkers_get(swigCPtr);
      return ret;
    } 
  }

  public string mMarkerID {
    set {
      SharpMochaPINVOKE.CStreamZone_mMarkerID_set(swigCPtr, value);
      if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = SharpMochaPINVOKE.CStreamZone_mMarkerID_get(swigCPtr);
      if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool mPreAccumulateUnloadObjs {
    set {
      SharpMochaPINVOKE.CStreamZone_mPreAccumulateUnloadObjs_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.CStreamZone_mPreAccumulateUnloadObjs_get(swigCPtr);
      return ret;
    } 
  }

  public bool incrementalDeload {
    set {
      SharpMochaPINVOKE.CStreamZone_incrementalDeload_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.CStreamZone_incrementalDeload_get(swigCPtr);
      return ret;
    } 
  }

  public bool GetIsStreaming() {
    bool ret = SharpMochaPINVOKE.CStreamZone_GetIsStreaming(swigCPtr);
    return ret;
  }

  public bool GetHasFinishedStreaming() {
    bool ret = SharpMochaPINVOKE.CStreamZone_GetHasFinishedStreaming(swigCPtr);
    return ret;
  }

  public void SetStreamMode(CStreamZone.StreamMode _mode) {
    SharpMochaPINVOKE.CStreamZone_SetStreamMode(swigCPtr, (int)_mode);
  }

  public void SetFileToStream(string _file) {
    SharpMochaPINVOKE.CStreamZone_SetFileToStream(swigCPtr, _file);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum StreamMode {
    GENERIC_LOAD,
    GENERIC_UNLOAD,
    PARALLEL_LOAD,
    ZONE_UNLOAD
  }

}

}
