/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class CCamera : Component {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CCamera(global::System.IntPtr cPtr, bool cMemoryOwn) : base(SharpMochaPINVOKE.CCamera_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CCamera obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public float GetNearZ() {
    float ret = SharpMochaPINVOKE.CCamera_GetNearZ(swigCPtr);
    return ret;
  }

  public float GetFarZ() {
    float ret = SharpMochaPINVOKE.CCamera_GetFarZ(swigCPtr);
    return ret;
  }

  public float GetAspect() {
    float ret = SharpMochaPINVOKE.CCamera_GetAspect(swigCPtr);
    return ret;
  }

  public float GetFovY() {
    float ret = SharpMochaPINVOKE.CCamera_GetFovY(swigCPtr);
    return ret;
  }

  public float GetFovX() {
    float ret = SharpMochaPINVOKE.CCamera_GetFovX(swigCPtr);
    return ret;
  }

  public float GetNearWindowWidth() {
    float ret = SharpMochaPINVOKE.CCamera_GetNearWindowWidth(swigCPtr);
    return ret;
  }

  public float GetNearWindowHeight() {
    float ret = SharpMochaPINVOKE.CCamera_GetNearWindowHeight(swigCPtr);
    return ret;
  }

  public float GetFarWindowWidth() {
    float ret = SharpMochaPINVOKE.CCamera_GetFarWindowWidth(swigCPtr);
    return ret;
  }

  public float GetFarWindowHeight() {
    float ret = SharpMochaPINVOKE.CCamera_GetFarWindowHeight(swigCPtr);
    return ret;
  }

  public MochaVec3 ScreenToWorldPosition(int x, int y) {
    MochaVec3 ret = new MochaVec3(SharpMochaPINVOKE.CCamera_ScreenToWorldPosition(swigCPtr, x, y), true);
    return ret;
  }

  public CCamera.CamType GetCamType() {
    CCamera.CamType ret = (CCamera.CamType)SharpMochaPINVOKE.CCamera_GetCamType(swigCPtr);
    return ret;
  }

  public float FoVmodifier() {
    float ret = SharpMochaPINVOKE.CCamera_FoVmodifier__SWIG_0(swigCPtr);
    return ret;
  }

  public void FoVmodifier(float val) {
    SharpMochaPINVOKE.CCamera_FoVmodifier__SWIG_1(swigCPtr, val);
  }

  public void Strafe(float d) {
    SharpMochaPINVOKE.CCamera_Strafe(swigCPtr, d);
  }

  public void Walk(float d) {
    SharpMochaPINVOKE.CCamera_Walk(swigCPtr, d);
  }

  public void Pitch(float angle) {
    SharpMochaPINVOKE.CCamera_Pitch(swigCPtr, angle);
  }

  public void RotateY(float angle) {
    SharpMochaPINVOKE.CCamera_RotateY(swigCPtr, angle);
  }

  public void SetRenderTarget(string name) {
    SharpMochaPINVOKE.CCamera_SetRenderTarget(swigCPtr, name);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public CCamera.CamType mCamType {
    set {
      SharpMochaPINVOKE.CCamera_mCamType_set(swigCPtr, (int)value);
    } 
    get {
      CCamera.CamType ret = (CCamera.CamType)SharpMochaPINVOKE.CCamera_mCamType_get(swigCPtr);
      return ret;
    } 
  }

  public CCamera.CamProj mActiveProj {
    set {
      SharpMochaPINVOKE.CCamera_mActiveProj_set(swigCPtr, (int)value);
    } 
    get {
      CCamera.CamProj ret = (CCamera.CamProj)SharpMochaPINVOKE.CCamera_mActiveProj_get(swigCPtr);
      return ret;
    } 
  }

  public float mFoVmodifier {
    set {
      SharpMochaPINVOKE.CCamera_mFoVmodifier_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CCamera_mFoVmodifier_get(swigCPtr);
      return ret;
    } 
  }

  public bool DispatchClickMessages {
    set {
      SharpMochaPINVOKE.CCamera_DispatchClickMessages_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.CCamera_DispatchClickMessages_get(swigCPtr);
      return ret;
    } 
  }

  public AssetHandle mCameraRT {
    set {
      SharpMochaPINVOKE.CCamera_mCameraRT_set(swigCPtr, AssetHandle.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.CCamera_mCameraRT_get(swigCPtr);
      AssetHandle ret = (cPtr == global::System.IntPtr.Zero) ? null : new AssetHandle(cPtr, false);
      return ret;
    } 
  }

  public float mNearZ {
    set {
      SharpMochaPINVOKE.CCamera_mNearZ_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CCamera_mNearZ_get(swigCPtr);
      return ret;
    } 
  }

  public float mFarZ {
    set {
      SharpMochaPINVOKE.CCamera_mFarZ_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CCamera_mFarZ_get(swigCPtr);
      return ret;
    } 
  }

  public enum CamType {
    MAIN,
    VR,
    GENERIC
  }

  public enum CamProj {
    PERSP,
    ORTHO,
    UNASSIGNED
  }

}

}
