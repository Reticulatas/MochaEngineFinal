/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class RigidBody : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RigidBody(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RigidBody obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void ApplyForce(MochaVec3 force, MochaVec3 at) {
    SharpMochaPINVOKE.RigidBody_ApplyForce(swigCPtr, MochaVec3.getCPtr(force), MochaVec3.getCPtr(at));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplyLinearForce(MochaVec3 force) {
    SharpMochaPINVOKE.RigidBody_ApplyLinearForce(swigCPtr, MochaVec3.getCPtr(force));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplyAngularForce(MochaVec3 force, MochaVec3 at) {
    SharpMochaPINVOKE.RigidBody_ApplyAngularForce(swigCPtr, MochaVec3.getCPtr(force), MochaVec3.getCPtr(at));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplyMasslessForce(MochaVec3 force, MochaVec3 at) {
    SharpMochaPINVOKE.RigidBody_ApplyMasslessForce(swigCPtr, MochaVec3.getCPtr(force), MochaVec3.getCPtr(at));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplyLinearMasslessForce(MochaVec3 force) {
    SharpMochaPINVOKE.RigidBody_ApplyLinearMasslessForce(swigCPtr, MochaVec3.getCPtr(force));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplyAngularMasslessForce(MochaVec3 force, MochaVec3 at) {
    SharpMochaPINVOKE.RigidBody_ApplyAngularMasslessForce(swigCPtr, MochaVec3.getCPtr(force), MochaVec3.getCPtr(at));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplyImpulse(MochaVec3 impulse, MochaVec3 at) {
    SharpMochaPINVOKE.RigidBody_ApplyImpulse(swigCPtr, MochaVec3.getCPtr(impulse), MochaVec3.getCPtr(at));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplyLinearImpulse(MochaVec3 impulse) {
    SharpMochaPINVOKE.RigidBody_ApplyLinearImpulse(swigCPtr, MochaVec3.getCPtr(impulse));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplyAngularImpulse(MochaVec3 impulse, MochaVec3 at) {
    SharpMochaPINVOKE.RigidBody_ApplyAngularImpulse(swigCPtr, MochaVec3.getCPtr(impulse), MochaVec3.getCPtr(at));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ApplyImmediateImpulse(MochaVec3 impulse, MochaVec3 at) {
    SharpMochaPINVOKE.RigidBody_ApplyImmediateImpulse(swigCPtr, MochaVec3.getCPtr(impulse), MochaVec3.getCPtr(at));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPosition(MochaVec3 position) {
    SharpMochaPINVOKE.RigidBody_SetPosition(swigCPtr, MochaVec3.getCPtr(position));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetOrientation(SWIGTYPE_p_Math__Matrix3 orientation) {
    SharpMochaPINVOKE.RigidBody_SetOrientation(swigCPtr, SWIGTYPE_p_Math__Matrix3.getCPtr(orientation));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLinearVelocity(MochaVec3 velocity) {
    SharpMochaPINVOKE.RigidBody_SetLinearVelocity(swigCPtr, MochaVec3.getCPtr(velocity));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAngularVelocity(MochaVec3 velocity) {
    SharpMochaPINVOKE.RigidBody_SetAngularVelocity(swigCPtr, MochaVec3.getCPtr(velocity));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAwake(bool awake) {
    SharpMochaPINVOKE.RigidBody_SetAwake(swigCPtr, awake);
  }

  public bool AllowRotation() {
    bool ret = SharpMochaPINVOKE.RigidBody_AllowRotation(swigCPtr);
    return ret;
  }

  public void SetAllowRotation(bool allowRotation) {
    SharpMochaPINVOKE.RigidBody_SetAllowRotation(swigCPtr, allowRotation);
  }

  public bool HasGravity() {
    bool ret = SharpMochaPINVOKE.RigidBody_HasGravity(swigCPtr);
    return ret;
  }

  public void SetHasGravity(bool hasGravity) {
    SharpMochaPINVOKE.RigidBody_SetHasGravity(swigCPtr, hasGravity);
  }

  public MochaVec3 Position() {
    MochaVec3 ret = new MochaVec3(SharpMochaPINVOKE.RigidBody_Position(swigCPtr), false);
    return ret;
  }

  public MochaVec3 LinearVelocity() {
    MochaVec3 ret = new MochaVec3(SharpMochaPINVOKE.RigidBody_LinearVelocity(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_Math__Matrix3 Orientation() {
    SWIGTYPE_p_Math__Matrix3 ret = new SWIGTYPE_p_Math__Matrix3(SharpMochaPINVOKE.RigidBody_Orientation(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_Math__Matrix3 InverseOrienation() {
    SWIGTYPE_p_Math__Matrix3 ret = new SWIGTYPE_p_Math__Matrix3(SharpMochaPINVOKE.RigidBody_InverseOrienation(swigCPtr), false);
    return ret;
  }

  public MochaVec3 AngularVelocity() {
    MochaVec3 ret = new MochaVec3(SharpMochaPINVOKE.RigidBody_AngularVelocity(swigCPtr), false);
    return ret;
  }

}

}
