/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class ScriptSubsystem : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ScriptSubsystem(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ScriptSubsystem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void Register_Callbacks(NativeMochaDotNetCallback _tickcallback, NativeMochaDotNetCScriptCopyCallback _copyFromCallback, NativeMochaDotNetCScriptEventCallback _eventQueueCallback, NativeMochaDotNetCallback _reloadCallback, NativeMochaDotNetCallback _serialize, NativeMochaDotNetCallback _deserialize, NativeMochaDotNetCScriptCallback _registerCallback, NativeMochaDotNetCScriptCallback _unregCallback, NativeMochaDotNetCallback _FocusCallback, NativeMochaDotNetCallback _UnFocusCallback) {
    SharpMochaPINVOKE.ScriptSubsystem_Register_Callbacks(swigCPtr, _tickcallback, _copyFromCallback, _eventQueueCallback, _reloadCallback, _serialize, _deserialize, _registerCallback, _unregCallback, _FocusCallback, _UnFocusCallback);
  }

  public static ScriptSubsystem getInstance() {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.ScriptSubsystem_getInstance();
    ScriptSubsystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ScriptSubsystem(cPtr, false);
    return ret;
  }

}

}
