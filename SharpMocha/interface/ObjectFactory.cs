/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class ObjectFactory : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ObjectFactory(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ObjectFactory obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ObjectFactory() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SharpMochaPINVOKE.delete_ObjectFactory(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public GameObject MakeNewGameObject(string name, BaseState state, bool isManaged) {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.ObjectFactory_MakeNewGameObject__SWIG_0(swigCPtr, name, BaseState.getCPtr(state), isManaged);
    GameObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new GameObject(cPtr, false);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GameObject MakeNewGameObject(string name, BaseState state) {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.ObjectFactory_MakeNewGameObject__SWIG_1(swigCPtr, name, BaseState.getCPtr(state));
    GameObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new GameObject(cPtr, false);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GameObject MakeNewGameObject(string name) {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.ObjectFactory_MakeNewGameObject__SWIG_2(swigCPtr, name);
    GameObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new GameObject(cPtr, false);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public GameObject MakeNewGameObject(GameObject obj, bool addToState, BaseState state) {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.ObjectFactory_MakeNewGameObject__SWIG_3(swigCPtr, GameObject.getCPtr(obj), addToState, BaseState.getCPtr(state));
    GameObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new GameObject(cPtr, false);
    return ret;
  }

  public GameObject Instantiate(string prefabName) {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.ObjectFactory_Instantiate(swigCPtr, prefabName);
    GameObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new GameObject(cPtr, false);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ObjectFactory getInstance() {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.ObjectFactory_getInstance();
    ObjectFactory ret = (cPtr == global::System.IntPtr.Zero) ? null : new ObjectFactory(cPtr, false);
    return ret;
  }

  public ObjectFactory() : this(SharpMochaPINVOKE.new_ObjectFactory(), true) {
  }

}

}
