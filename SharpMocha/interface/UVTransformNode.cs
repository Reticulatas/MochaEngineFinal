/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class UVTransformNode : MatAttribNode {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UVTransformNode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(SharpMochaPINVOKE.UVTransformNode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UVTransformNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public void SetTextureOffset(MochaVec2 offset) {
    SharpMochaPINVOKE.UVTransformNode_SetTextureOffset(swigCPtr, MochaVec2.getCPtr(offset));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTextureScale(MochaVec2 scale) {
    SharpMochaPINVOKE.UVTransformNode_SetTextureScale(swigCPtr, MochaVec2.getCPtr(scale));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTextureOffsetU(float u) {
    SharpMochaPINVOKE.UVTransformNode_SetTextureOffsetU(swigCPtr, u);
  }

  public void SetTextureOffsetV(float v) {
    SharpMochaPINVOKE.UVTransformNode_SetTextureOffsetV(swigCPtr, v);
  }

  public void SetTextureScaleX(float xScale) {
    SharpMochaPINVOKE.UVTransformNode_SetTextureScaleX(swigCPtr, xScale);
  }

  public void SetTextureScaleY(float yScale) {
    SharpMochaPINVOKE.UVTransformNode_SetTextureScaleY(swigCPtr, yScale);
  }

  public float GetTextureOffsetU() {
    float ret = SharpMochaPINVOKE.UVTransformNode_GetTextureOffsetU(swigCPtr);
    return ret;
  }

  public float GetTextureOffsetY() {
    float ret = SharpMochaPINVOKE.UVTransformNode_GetTextureOffsetY(swigCPtr);
    return ret;
  }

  public float GetTextureScaleX() {
    float ret = SharpMochaPINVOKE.UVTransformNode_GetTextureScaleX(swigCPtr);
    return ret;
  }

  public float GetTextureScaleY() {
    float ret = SharpMochaPINVOKE.UVTransformNode_GetTextureScaleY(swigCPtr);
    return ret;
  }

  public MochaVec2 GetTextureOffset() {
    MochaVec2 ret = new MochaVec2(SharpMochaPINVOKE.UVTransformNode_GetTextureOffset(swigCPtr), true);
    return ret;
  }

  public MochaVec2 GetTextureScale() {
    MochaVec2 ret = new MochaVec2(SharpMochaPINVOKE.UVTransformNode_GetTextureScale(swigCPtr), true);
    return ret;
  }

}

}
