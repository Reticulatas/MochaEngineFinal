/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class AssetManager : IMeta {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal AssetManager(global::System.IntPtr cPtr, bool cMemoryOwn) : base(SharpMochaPINVOKE.AssetManager_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(AssetManager obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public void CheckForChangedAssets() {
    SharpMochaPINVOKE.AssetManager_CheckForChangedAssets(swigCPtr);
  }

  public void PrintLoadedAssets() {
    SharpMochaPINVOKE.AssetManager_PrintLoadedAssets(swigCPtr);
  }

  public uint NumOfAssets() {
    uint ret = SharpMochaPINVOKE.AssetManager_NumOfAssets(swigCPtr);
    return ret;
  }

  public AssetHandle GetAsset(uint assetId) {
    AssetHandle ret = new AssetHandle(SharpMochaPINVOKE.AssetManager_GetAsset__SWIG_0(swigCPtr, assetId), true);
    return ret;
  }

  public AssetHandle GetAsset(string assetId) {
    AssetHandle ret = new AssetHandle(SharpMochaPINVOKE.AssetManager_GetAsset__SWIG_1(swigCPtr, assetId), true);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AssetManager getInstance() {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.AssetManager_getInstance();
    AssetManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new AssetManager(cPtr, false);
    return ret;
  }

}

}
