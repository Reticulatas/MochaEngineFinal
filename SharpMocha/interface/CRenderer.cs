/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class CRenderer : Component {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CRenderer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(SharpMochaPINVOKE.CRenderer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CRenderer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public virtual void SetMesh(AssetHandle meshHandle) {
    SharpMochaPINVOKE.CRenderer_SetMesh(swigCPtr, AssetHandle.getCPtr(meshHandle));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetMaterial(Material matHandle) {
    SharpMochaPINVOKE.CRenderer_SetMaterial(swigCPtr, Material.getCPtr(matHandle));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual Mesh GetMesh() {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.CRenderer_GetMesh(swigCPtr);
    Mesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new Mesh(cPtr, false);
    return ret;
  }

  public virtual Material GetMaterial() {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.CRenderer_GetMaterial(swigCPtr);
    Material ret = (cPtr == global::System.IntPtr.Zero) ? null : new Material(cPtr, false);
    return ret;
  }

  public virtual Material GetCopyMaterial() {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.CRenderer_GetCopyMaterial(swigCPtr);
    Material ret = (cPtr == global::System.IntPtr.Zero) ? null : new Material(cPtr, false);
    return ret;
  }

  public virtual MochaVec3 GetMeshDimension() {
    MochaVec3 ret = new MochaVec3(SharpMochaPINVOKE.CRenderer_GetMeshDimension(swigCPtr), true);
    return ret;
  }

  public AABB GetBoundingBox() {
    AABB ret = new AABB(SharpMochaPINVOKE.CRenderer_GetBoundingBox(swigCPtr), true);
    return ret;
  }

  public AssetHandle mMesh {
    set {
      SharpMochaPINVOKE.CRenderer_mMesh_set(swigCPtr, AssetHandle.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.CRenderer_mMesh_get(swigCPtr);
      AssetHandle ret = (cPtr == global::System.IntPtr.Zero) ? null : new AssetHandle(cPtr, false);
      return ret;
    } 
  }

  public Material mMaterial {
    set {
      SharpMochaPINVOKE.CRenderer_mMaterial_set(swigCPtr, Material.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.CRenderer_mMaterial_get(swigCPtr);
      Material ret = (cPtr == global::System.IntPtr.Zero) ? null : new Material(cPtr, false);
      return ret;
    } 
  }

  public CRenderer.BlendState mBlendState {
    set {
      SharpMochaPINVOKE.CRenderer_mBlendState_set(swigCPtr, (int)value);
    } 
    get {
      CRenderer.BlendState ret = (CRenderer.BlendState)SharpMochaPINVOKE.CRenderer_mBlendState_get(swigCPtr);
      return ret;
    } 
  }

  public float mBumpFactor {
    set {
      SharpMochaPINVOKE.CRenderer_mBumpFactor_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CRenderer_mBumpFactor_get(swigCPtr);
      return ret;
    } 
  }

  public float mMetallicFactor {
    set {
      SharpMochaPINVOKE.CRenderer_mMetallicFactor_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CRenderer_mMetallicFactor_get(swigCPtr);
      return ret;
    } 
  }

  public float mRoughnessFactor {
    set {
      SharpMochaPINVOKE.CRenderer_mRoughnessFactor_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CRenderer_mRoughnessFactor_get(swigCPtr);
      return ret;
    } 
  }

  public Color mEmissiveColor {
    set {
      SharpMochaPINVOKE.CRenderer_mEmissiveColor_set(swigCPtr, Color.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.CRenderer_mEmissiveColor_get(swigCPtr);
      Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public bool mPerspective {
    set {
      SharpMochaPINVOKE.CRenderer_mPerspective_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.CRenderer_mPerspective_get(swigCPtr);
      return ret;
    } 
  }

  public bool mReceiveShadows {
    set {
      SharpMochaPINVOKE.CRenderer_mReceiveShadows_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.CRenderer_mReceiveShadows_get(swigCPtr);
      return ret;
    } 
  }

  public enum BlendState {
    ALPHA_BLEND,
    ADDITIVE_BLEND,
    DEFERRED_BLENDPASS_1,
    DEFERRED_BLENDPASS_2,
    COLOR_BLEND,
    NO_BLEND
  }

}

}
