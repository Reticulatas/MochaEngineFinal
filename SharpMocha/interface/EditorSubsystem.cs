/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class EditorSubsystem : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EditorSubsystem(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EditorSubsystem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool IsTesting() {
    bool ret = SharpMochaPINVOKE.EditorSubsystem_IsTesting(swigCPtr);
    return ret;
  }

  public EditorState GetEditorState() {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.EditorSubsystem_GetEditorState(swigCPtr);
    EditorState ret = (cPtr == global::System.IntPtr.Zero) ? null : new EditorState(cPtr, false);
    return ret;
  }

  public CCamera EditorCamera() {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.EditorSubsystem_EditorCamera(swigCPtr);
    CCamera ret = (cPtr == global::System.IntPtr.Zero) ? null : new CCamera(cPtr, false);
    return ret;
  }

  public GameObject EditorTransformWidget() {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.EditorSubsystem_EditorTransformWidget(swigCPtr);
    GameObject ret = (cPtr == global::System.IntPtr.Zero) ? null : new GameObject(cPtr, false);
    return ret;
  }

  public void Register_Tick(NativeMochaDotNetCallback _callback) {
    SharpMochaPINVOKE.EditorSubsystem_Register_Tick(swigCPtr, _callback);
  }

  public void SetSelectedObjects(GameObjectVector objs) {
    SharpMochaPINVOKE.EditorSubsystem_SetSelectedObjects(swigCPtr, GameObjectVector.getCPtr(objs));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void BeginTesting() {
    SharpMochaPINVOKE.EditorSubsystem_BeginTesting(swigCPtr);
  }

  public void EndTesting() {
    SharpMochaPINVOKE.EditorSubsystem_EndTesting(swigCPtr);
  }

  public WidgetManager widgetManager {
    set {
      SharpMochaPINVOKE.EditorSubsystem_widgetManager_set(swigCPtr, WidgetManager.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.EditorSubsystem_widgetManager_get(swigCPtr);
      WidgetManager ret = (cPtr == global::System.IntPtr.Zero) ? null : new WidgetManager(cPtr, false);
      return ret;
    } 
  }

  public static EditorSubsystem getInstance() {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.EditorSubsystem_getInstance();
    EditorSubsystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new EditorSubsystem(cPtr, false);
    return ret;
  }

  public int gridSize {
    set {
      SharpMochaPINVOKE.EditorSubsystem_gridSize_set(swigCPtr, value);
    } 
    get {
      int ret = SharpMochaPINVOKE.EditorSubsystem_gridSize_get(swigCPtr);
      return ret;
    } 
  }

}

}
