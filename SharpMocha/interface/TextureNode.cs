/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class TextureNode : MatAttribNode {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal TextureNode(global::System.IntPtr cPtr, bool cMemoryOwn) : base(SharpMochaPINVOKE.TextureNode_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TextureNode obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public AssetHandle mTexture {
    set {
      SharpMochaPINVOKE.TextureNode_mTexture_set(swigCPtr, AssetHandle.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.TextureNode_mTexture_get(swigCPtr);
      AssetHandle ret = (cPtr == global::System.IntPtr.Zero) ? null : new AssetHandle(cPtr, false);
      return ret;
    } 
  }

  [MochaDoNotShow]
  public TextureNode.TextureRegisterType mTextureRegister {
    set {
      SharpMochaPINVOKE.TextureNode_mTextureRegister_set(swigCPtr, (int)value);
    } 
    get {
      TextureNode.TextureRegisterType ret = (TextureNode.TextureRegisterType)SharpMochaPINVOKE.TextureNode_mTextureRegister_get(swigCPtr);
      return ret;
    } 
  }

  public void SetTexture(AssetHandle hnd) {
    SharpMochaPINVOKE.TextureNode_SetTexture__SWIG_0(swigCPtr, AssetHandle.getCPtr(hnd));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTexture(string textureName) {
    SharpMochaPINVOKE.TextureNode_SetTexture__SWIG_1(swigCPtr, textureName);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTextureRegister(TextureNode.TextureRegisterType type) {
    SharpMochaPINVOKE.TextureNode_SetTextureRegister(swigCPtr, (int)type);
  }

  public float GetTextureWidth() {
    float ret = SharpMochaPINVOKE.TextureNode_GetTextureWidth(swigCPtr);
    return ret;
  }

  public float GetTextureHeight() {
    float ret = SharpMochaPINVOKE.TextureNode_GetTextureHeight(swigCPtr);
    return ret;
  }

  public AssetHandle GetTexture() {
    AssetHandle ret = new AssetHandle(SharpMochaPINVOKE.TextureNode_GetTexture(swigCPtr), false);
    return ret;
  }

  public enum TextureRegisterType {
    TEXTURE_DIFFUSE,
    TEXTURE_NORMAL,
    TEXTURE_SPECULAR
  }

}

}
