/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class CFontRenderer : CDiffuseRenderer {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CFontRenderer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(SharpMochaPINVOKE.CFontRenderer_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CFontRenderer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public void ClampTextWithinWidth(float lineWidthLimit) {
    SharpMochaPINVOKE.CFontRenderer_ClampTextWithinWidth(swigCPtr, lineWidthLimit);
  }

  public float GetLineWidth(uint lineIndex) {
    float ret = SharpMochaPINVOKE.CFontRenderer_GetLineWidth(swigCPtr, lineIndex);
    return ret;
  }

  public uint GetNumberOfLines() {
    uint ret = SharpMochaPINVOKE.CFontRenderer_GetNumberOfLines(swigCPtr);
    return ret;
  }

  public uint mFontSize {
    set {
      SharpMochaPINVOKE.CFontRenderer_mFontSize_set(swigCPtr, value);
    } 
    get {
      uint ret = SharpMochaPINVOKE.CFontRenderer_mFontSize_get(swigCPtr);
      return ret;
    } 
  }

  public float mFontScale {
    set {
      SharpMochaPINVOKE.CFontRenderer_mFontScale_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CFontRenderer_mFontScale_get(swigCPtr);
      return ret;
    } 
  }

  public string mText {
    set {
      SharpMochaPINVOKE.CFontRenderer_mText_set(swigCPtr, value);
      if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = SharpMochaPINVOKE.CFontRenderer_mText_get(swigCPtr);
      if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public Color mColor {
    set {
      SharpMochaPINVOKE.CFontRenderer_mColor_set(swigCPtr, Color.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.CFontRenderer_mColor_get(swigCPtr);
      Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public CFontRenderer.FONT_JUSTIFICATION mJustification {
    set {
      SharpMochaPINVOKE.CFontRenderer_mJustification_set(swigCPtr, (int)value);
    } 
    get {
      CFontRenderer.FONT_JUSTIFICATION ret = (CFontRenderer.FONT_JUSTIFICATION)SharpMochaPINVOKE.CFontRenderer_mJustification_get(swigCPtr);
      return ret;
    } 
  }

  public AssetHandle mFontAsset {
    set {
      SharpMochaPINVOKE.CFontRenderer_mFontAsset_set(swigCPtr, AssetHandle.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.CFontRenderer_mFontAsset_get(swigCPtr);
      AssetHandle ret = (cPtr == global::System.IntPtr.Zero) ? null : new AssetHandle(cPtr, false);
      return ret;
    } 
  }

  public float mNewlineSpacing {
    set {
      SharpMochaPINVOKE.CFontRenderer_mNewlineSpacing_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CFontRenderer_mNewlineSpacing_get(swigCPtr);
      return ret;
    } 
  }

  public enum FONT_JUSTIFICATION {
    LEFT_JUSTIFIED = 0,
    RIGHT_JUSTIFIED,
    CENTER_JUSTIFIED,
    NUM_FONT_JUSTIFICATION
  }

}

}
