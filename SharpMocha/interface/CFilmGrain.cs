/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class CFilmGrain : CPostProcess {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CFilmGrain(global::System.IntPtr cPtr, bool cMemoryOwn) : base(SharpMochaPINVOKE.CFilmGrain_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CFilmGrain obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public float mBarHeight {
    set {
      SharpMochaPINVOKE.CFilmGrain_mBarHeight_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CFilmGrain_mBarHeight_get(swigCPtr);
      return ret;
    } 
  }

  public float mBarSpeed {
    set {
      SharpMochaPINVOKE.CFilmGrain_mBarSpeed_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CFilmGrain_mBarSpeed_get(swigCPtr);
      return ret;
    } 
  }

  public float mBarOverflow {
    set {
      SharpMochaPINVOKE.CFilmGrain_mBarOverflow_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CFilmGrain_mBarOverflow_get(swigCPtr);
      return ret;
    } 
  }

  public float mNoiseDensity {
    set {
      SharpMochaPINVOKE.CFilmGrain_mNoiseDensity_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CFilmGrain_mNoiseDensity_get(swigCPtr);
      return ret;
    } 
  }

  public float mPixelDensity {
    set {
      SharpMochaPINVOKE.CFilmGrain_mPixelDensity_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CFilmGrain_mPixelDensity_get(swigCPtr);
      return ret;
    } 
  }

}

}
