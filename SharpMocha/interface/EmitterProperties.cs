/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class EmitterProperties : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal EmitterProperties(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(EmitterProperties obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~EmitterProperties() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SharpMochaPINVOKE.delete_EmitterProperties(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public uint mUsedParticles {
    set {
      SharpMochaPINVOKE.EmitterProperties_mUsedParticles_set(swigCPtr, value);
    } 
    get {
      uint ret = SharpMochaPINVOKE.EmitterProperties_mUsedParticles_get(swigCPtr);
      return ret;
    } 
  }

  public int mWarmCount {
    set {
      SharpMochaPINVOKE.EmitterProperties_mWarmCount_set(swigCPtr, value);
    } 
    get {
      int ret = SharpMochaPINVOKE.EmitterProperties_mWarmCount_get(swigCPtr);
      return ret;
    } 
  }

  public float mMinLifetime {
    set {
      SharpMochaPINVOKE.EmitterProperties_mMinLifetime_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.EmitterProperties_mMinLifetime_get(swigCPtr);
      return ret;
    } 
  }

  public float mMaxLifetime {
    set {
      SharpMochaPINVOKE.EmitterProperties_mMaxLifetime_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.EmitterProperties_mMaxLifetime_get(swigCPtr);
      return ret;
    } 
  }

  public float mMinVel {
    set {
      SharpMochaPINVOKE.EmitterProperties_mMinVel_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.EmitterProperties_mMinVel_get(swigCPtr);
      return ret;
    } 
  }

  public float mMaxVel {
    set {
      SharpMochaPINVOKE.EmitterProperties_mMaxVel_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.EmitterProperties_mMaxVel_get(swigCPtr);
      return ret;
    } 
  }

  public float mStartSize {
    set {
      SharpMochaPINVOKE.EmitterProperties_mStartSize_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.EmitterProperties_mStartSize_get(swigCPtr);
      return ret;
    } 
  }

  public float mEndSize {
    set {
      SharpMochaPINVOKE.EmitterProperties_mEndSize_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.EmitterProperties_mEndSize_get(swigCPtr);
      return ret;
    } 
  }

  public float mFadeStartAmt {
    set {
      SharpMochaPINVOKE.EmitterProperties_mFadeStartAmt_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.EmitterProperties_mFadeStartAmt_get(swigCPtr);
      return ret;
    } 
  }

  public float mFadeEndAmt {
    set {
      SharpMochaPINVOKE.EmitterProperties_mFadeEndAmt_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.EmitterProperties_mFadeEndAmt_get(swigCPtr);
      return ret;
    } 
  }

  public Color mStartColour {
    set {
      SharpMochaPINVOKE.EmitterProperties_mStartColour_set(swigCPtr, Color.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.EmitterProperties_mStartColour_get(swigCPtr);
      Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public Color mEndColour {
    set {
      SharpMochaPINVOKE.EmitterProperties_mEndColour_set(swigCPtr, Color.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.EmitterProperties_mEndColour_get(swigCPtr);
      Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public float mEmissionAngleVariance {
    set {
      SharpMochaPINVOKE.EmitterProperties_mEmissionAngleVariance_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.EmitterProperties_mEmissionAngleVariance_get(swigCPtr);
      return ret;
    } 
  }

  public MochaVec3 mEmissionAngle {
    set {
      SharpMochaPINVOKE.EmitterProperties_mEmissionAngle_set(swigCPtr, MochaVec3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.EmitterProperties_mEmissionAngle_get(swigCPtr);
      MochaVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new MochaVec3(cPtr, false);
      return ret;
    } 
  }

  public bool mIsEmitting {
    set {
      SharpMochaPINVOKE.EmitterProperties_mIsEmitting_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.EmitterProperties_mIsEmitting_get(swigCPtr);
      return ret;
    } 
  }

  public float mGravityFactor {
    set {
      SharpMochaPINVOKE.EmitterProperties_mGravityFactor_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.EmitterProperties_mGravityFactor_get(swigCPtr);
      return ret;
    } 
  }

  public float mRadius {
    set {
      SharpMochaPINVOKE.EmitterProperties_mRadius_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.EmitterProperties_mRadius_get(swigCPtr);
      return ret;
    } 
  }

  public MochaVec3 mAttractorPos {
    set {
      SharpMochaPINVOKE.EmitterProperties_mAttractorPos_set(swigCPtr, MochaVec3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.EmitterProperties_mAttractorPos_get(swigCPtr);
      MochaVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new MochaVec3(cPtr, false);
      return ret;
    } 
  }

  public bool mAttracted {
    set {
      SharpMochaPINVOKE.EmitterProperties_mAttracted_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.EmitterProperties_mAttracted_get(swigCPtr);
      return ret;
    } 
  }

  public bool mAttractorLocalSpace {
    set {
      SharpMochaPINVOKE.EmitterProperties_mAttractorLocalSpace_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.EmitterProperties_mAttractorLocalSpace_get(swigCPtr);
      return ret;
    } 
  }

  public float mAttractorFactor {
    set {
      SharpMochaPINVOKE.EmitterProperties_mAttractorFactor_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.EmitterProperties_mAttractorFactor_get(swigCPtr);
      return ret;
    } 
  }

  public bool mIsOneShot {
    set {
      SharpMochaPINVOKE.EmitterProperties_mIsOneShot_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.EmitterProperties_mIsOneShot_get(swigCPtr);
      return ret;
    } 
  }

  public bool mRandomDirection {
    set {
      SharpMochaPINVOKE.EmitterProperties_mRandomDirection_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.EmitterProperties_mRandomDirection_get(swigCPtr);
      return ret;
    } 
  }

  public bool mDeceleration {
    set {
      SharpMochaPINVOKE.EmitterProperties_mDeceleration_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.EmitterProperties_mDeceleration_get(swigCPtr);
      return ret;
    } 
  }

  public bool mSpawnInGeometry {
    set {
      SharpMochaPINVOKE.EmitterProperties_mSpawnInGeometry_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.EmitterProperties_mSpawnInGeometry_get(swigCPtr);
      return ret;
    } 
  }

  public bool mDieInGeometry {
    set {
      SharpMochaPINVOKE.EmitterProperties_mDieInGeometry_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.EmitterProperties_mDieInGeometry_get(swigCPtr);
      return ret;
    } 
  }

  public MochaVec3 mNormal {
    set {
      SharpMochaPINVOKE.EmitterProperties_mNormal_set(swigCPtr, MochaVec3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.EmitterProperties_mNormal_get(swigCPtr);
      MochaVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new MochaVec3(cPtr, false);
      return ret;
    } 
  }

  public bool mPlaneEmit {
    set {
      SharpMochaPINVOKE.EmitterProperties_mPlaneEmit_set(swigCPtr, value);
    } 
    get {
      bool ret = SharpMochaPINVOKE.EmitterProperties_mPlaneEmit_get(swigCPtr);
      return ret;
    } 
  }

  public ParticleEmissionType mType {
    set {
      SharpMochaPINVOKE.EmitterProperties_mType_set(swigCPtr, (int)value);
    } 
    get {
      ParticleEmissionType ret = (ParticleEmissionType)SharpMochaPINVOKE.EmitterProperties_mType_get(swigCPtr);
      return ret;
    } 
  }

  public EmitterProperties() : this(SharpMochaPINVOKE.new_EmitterProperties(), true) {
  }

}

}
