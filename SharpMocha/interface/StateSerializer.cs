/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class StateSerializer : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal StateSerializer(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StateSerializer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~StateSerializer() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SharpMochaPINVOKE.delete_StateSerializer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public StateSerializer() : this(SharpMochaPINVOKE.new_StateSerializer(), true) {
  }

  public bool DoRecoverySave() {
    bool ret = SharpMochaPINVOKE.StateSerializer_DoRecoverySave(swigCPtr);
    return ret;
  }

  public bool SaveCurrentState(string filename) {
    bool ret = SharpMochaPINVOKE.StateSerializer_SaveCurrentState(swigCPtr, filename);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SaveState(BaseState b, string filename) {
    bool ret = SharpMochaPINVOKE.StateSerializer_SaveState(swigCPtr, BaseState.getCPtr(b), filename);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void LoadState(string filename, bool replaceCurrent) {
    SharpMochaPINVOKE.StateSerializer_LoadState__SWIG_0(swigCPtr, filename, replaceCurrent);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LoadState(string filename) {
    SharpMochaPINVOKE.StateSerializer_LoadState__SWIG_1(swigCPtr, filename);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void MergeStates(BaseState src, BaseState dest, BoolVector whichObjsToMerge) {
    SharpMochaPINVOKE.StateSerializer_MergeStates__SWIG_0(swigCPtr, BaseState.getCPtr(src), BaseState.getCPtr(dest), BoolVector.getCPtr(whichObjsToMerge));
  }

  public void MergeStates(BaseState src, BaseState dest) {
    SharpMochaPINVOKE.StateSerializer_MergeStates__SWIG_1(swigCPtr, BaseState.getCPtr(src), BaseState.getCPtr(dest));
  }

  public StateObjDescVector LoadStateInformation(string filename, bool remove_state, SWIGTYPE_p_p_BaseState ret_newstate) {
    StateObjDescVector ret = new StateObjDescVector(SharpMochaPINVOKE.StateSerializer_LoadStateInformation__SWIG_0(swigCPtr, filename, remove_state, SWIGTYPE_p_p_BaseState.getCPtr(ret_newstate)), true);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StateObjDescVector LoadStateInformation(string filename, bool remove_state) {
    StateObjDescVector ret = new StateObjDescVector(SharpMochaPINVOKE.StateSerializer_LoadStateInformation__SWIG_1(swigCPtr, filename, remove_state), true);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public StateObjDescVector LoadStateInformation(string filename) {
    StateObjDescVector ret = new StateObjDescVector(SharpMochaPINVOKE.StateSerializer_LoadStateInformation__SWIG_2(swigCPtr, filename), true);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
