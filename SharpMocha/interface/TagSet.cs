/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class TagSet : System.IDisposable 
#if SWIG_DOTNET_3
    , System.Collections.Generic.ISet<string>
#endif
 {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal TagSet(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(TagSet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~TagSet() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SharpMochaPINVOKE.delete_TagSet(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public TagSet() : this(SharpMochaPINVOKE.new_TagSet__SWIG_0(), true) {
  }

  public TagSet(TagSet other) : this(SharpMochaPINVOKE.new_TagSet__SWIG_1(TagSet.getCPtr(other)), true) {
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint size() {
    uint ret = SharpMochaPINVOKE.TagSet_size(swigCPtr);
    return ret;
  }

  public bool empty() {
    bool ret = SharpMochaPINVOKE.TagSet_empty(swigCPtr);
    return ret;
  }

  public void Clear() {
    SharpMochaPINVOKE.TagSet_Clear(swigCPtr);
  }

  private string getitem(string val) {
    string ret = SharpMochaPINVOKE.TagSet_getitem(swigCPtr, val);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void setitem(string x) {
    SharpMochaPINVOKE.TagSet_setitem(swigCPtr, x);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Contains(string val) {
    bool ret = SharpMochaPINVOKE.TagSet_Contains(swigCPtr, val);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Add(string val) {
    SharpMochaPINVOKE.TagSet_Add(swigCPtr, val);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Remove(string val) {
    bool ret = SharpMochaPINVOKE.TagSet_Remove(swigCPtr, val);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public global::System.IntPtr create_iterator_begin() {
    global::System.IntPtr ret = SharpMochaPINVOKE.TagSet_create_iterator_begin(swigCPtr);
    return ret;
  }

  public bool is_iterator_good(SWIGTYPE_p_std__setT_std__string_t__iterator swigier) {
    bool ret = SharpMochaPINVOKE.TagSet_is_iterator_good(swigCPtr, SWIGTYPE_p_std__setT_std__string_t__iterator.getCPtr(swigier));
    return ret;
  }

  public string get_next_key(global::System.IntPtr swigiterator) {
    string ret = SharpMochaPINVOKE.TagSet_get_next_key(swigCPtr, swigiterator);
    return ret;
  }

  public void destroy_iterator(global::System.IntPtr swigiterator) {
    SharpMochaPINVOKE.TagSet_destroy_iterator(swigCPtr, swigiterator);
  }

}

}
