/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public class Color : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Color(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Color obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Color() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SharpMochaPINVOKE.delete_Color(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

	public override string ToString()
	{
		return "(" + r.ToString() + ", " + g.ToString() + ", " 
			+ b.ToString() + ", " + a.ToString() + ")";
	}

  public float r {
    set {
      SharpMochaPINVOKE.Color_r_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.Color_r_get(swigCPtr);
      return ret;
    } 
  }

  public float g {
    set {
      SharpMochaPINVOKE.Color_g_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.Color_g_get(swigCPtr);
      return ret;
    } 
  }

  public float b {
    set {
      SharpMochaPINVOKE.Color_b_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.Color_b_get(swigCPtr);
      return ret;
    } 
  }

  public float a {
    set {
      SharpMochaPINVOKE.Color_a_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.Color_a_get(swigCPtr);
      return ret;
    } 
  }

  public Color(float _r, float _g, float _b, float _a) : this(SharpMochaPINVOKE.new_Color__SWIG_0(_r, _g, _b, _a), true) {
  }

  public Color(float _r, float _g, float _b) : this(SharpMochaPINVOKE.new_Color__SWIG_1(_r, _g, _b), true) {
  }

  public Color(float _r, float _g) : this(SharpMochaPINVOKE.new_Color__SWIG_2(_r, _g), true) {
  }

  public Color(float _r) : this(SharpMochaPINVOKE.new_Color__SWIG_3(_r), true) {
  }

  public Color() : this(SharpMochaPINVOKE.new_Color__SWIG_4(), true) {
  }

  public Color(SWIGTYPE_p_Vector4 color) : this(SharpMochaPINVOKE.new_Color__SWIG_5(SWIGTYPE_p_Vector4.getCPtr(color)), true) {
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public Color(Color clr) : this(SharpMochaPINVOKE.new_Color__SWIG_6(Color.getCPtr(clr)), true) {
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public Color Mul(float rhs) {
    Color ret = new Color(SharpMochaPINVOKE.Color_Mul(swigCPtr, rhs), true);
    return ret;
  }

  public Color MulAssign(float rhs) {
    Color ret = new Color(SharpMochaPINVOKE.Color_MulAssign(swigCPtr, rhs), false);
    return ret;
  }

  public bool Comp(Color clr) {
    bool ret = SharpMochaPINVOKE.Color_Comp(swigCPtr, Color.getCPtr(clr));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool NegComp(Color clr) {
    bool ret = SharpMochaPINVOKE.Color_NegComp(swigCPtr, Color.getCPtr(clr));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
