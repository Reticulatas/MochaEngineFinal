/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class CParticleEmitter : Component {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CParticleEmitter(global::System.IntPtr cPtr, bool cMemoryOwn) : base(SharpMochaPINVOKE.CParticleEmitter_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CParticleEmitter obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public SWIGTYPE_p_GPUShader GetGPUShader() {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.CParticleEmitter_GetGPUShader(swigCPtr);
    SWIGTYPE_p_GPUShader ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_GPUShader(cPtr, false);
    return ret;
  }

  public void SetGPUShader(SWIGTYPE_p_GPUShader val) {
    SharpMochaPINVOKE.CParticleEmitter_SetGPUShader(swigCPtr, SWIGTYPE_p_GPUShader.getCPtr(val));
  }

  public ParticleBehaviour GetBehaviour() {
    ParticleBehaviour ret = (ParticleBehaviour)SharpMochaPINVOKE.CParticleEmitter_GetBehaviour__SWIG_0(swigCPtr);
    return ret;
  }

  public void GetBehaviour(ParticleBehaviour val) {
    SharpMochaPINVOKE.CParticleEmitter_GetBehaviour__SWIG_1(swigCPtr, (int)val);
  }

  public void TriggerOneShot() {
    SharpMochaPINVOKE.CParticleEmitter_TriggerOneShot(swigCPtr);
  }

  public EmitterProperties mEmitterProperty {
    set {
      SharpMochaPINVOKE.CParticleEmitter_mEmitterProperty_set(swigCPtr, EmitterProperties.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.CParticleEmitter_mEmitterProperty_get(swigCPtr);
      EmitterProperties ret = (cPtr == global::System.IntPtr.Zero) ? null : new EmitterProperties(cPtr, false);
      return ret;
    } 
  }

}

}
