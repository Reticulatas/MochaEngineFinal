/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class Map : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Map(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Map obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Map() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SharpMochaPINVOKE.delete_Map(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static void LoadMapAdditive(string filename) {
    SharpMochaPINVOKE.Map_LoadMapAdditive(filename);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LoadMap(string filename) {
    SharpMochaPINVOKE.Map_LoadMap(filename);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void LoadMapDontUnload(string filename) {
    SharpMochaPINVOKE.Map_LoadMapDontUnload(filename);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void UnloadMap() {
    SharpMochaPINVOKE.Map_UnloadMap();
  }

  public static void LoadOnlyMap(string filename) {
    SharpMochaPINVOKE.Map_LoadOnlyMap(filename);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void DeloadZone(IZone zoneID) {
    SharpMochaPINVOKE.Map_DeloadZone(IZone.getCPtr(zoneID));
  }

  public static void ReloadMap() {
    SharpMochaPINVOKE.Map_ReloadMap();
  }

  public static void ReloadPreviousMap() {
    SharpMochaPINVOKE.Map_ReloadPreviousMap();
  }

  public Map() : this(SharpMochaPINVOKE.new_Map(), true) {
  }

}

}
