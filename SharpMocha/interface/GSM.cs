/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class GSM : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GSM(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(GSM obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public BaseState getActiveState() {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.GSM_getActiveState(swigCPtr);
    BaseState ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseState(cPtr, false);
    return ret;
  }

  public uint GetNumberOfStates() {
    uint ret = SharpMochaPINVOKE.GSM_GetNumberOfStates(swigCPtr);
    return ret;
  }

  public BaseState getStateUnderActive() {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.GSM_getStateUnderActive(swigCPtr);
    BaseState ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseState(cPtr, false);
    return ret;
  }

  public BaseState getStateAtIndex(uint i) {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.GSM_getStateAtIndex(swigCPtr, i);
    BaseState ret = (cPtr == global::System.IntPtr.Zero) ? null : new BaseState(cPtr, false);
    return ret;
  }

  public void PushStateToBottom(BaseState state, bool doInit) {
    SharpMochaPINVOKE.GSM_PushStateToBottom__SWIG_0(swigCPtr, BaseState.getCPtr(state), doInit);
  }

  public void PushStateToBottom(BaseState state) {
    SharpMochaPINVOKE.GSM_PushStateToBottom__SWIG_1(swigCPtr, BaseState.getCPtr(state));
  }

  public void PushState(BaseState state, bool doInit) {
    SharpMochaPINVOKE.GSM_PushState__SWIG_0(swigCPtr, BaseState.getCPtr(state), doInit);
  }

  public void PushState(BaseState state) {
    SharpMochaPINVOKE.GSM_PushState__SWIG_1(swigCPtr, BaseState.getCPtr(state));
  }

  public void PopState() {
    SharpMochaPINVOKE.GSM_PopState(swigCPtr);
  }

  public void RemoveState(BaseState state) {
    SharpMochaPINVOKE.GSM_RemoveState(swigCPtr, BaseState.getCPtr(state));
  }

  public void Freeze() {
    SharpMochaPINVOKE.GSM_Freeze(swigCPtr);
  }

  public void UnFreeze() {
    SharpMochaPINVOKE.GSM_UnFreeze(swigCPtr);
  }

  public bool IsFrozen() {
    bool ret = SharpMochaPINVOKE.GSM_IsFrozen(swigCPtr);
    return ret;
  }

  public static GSM getInstance() {
    global::System.IntPtr cPtr = SharpMochaPINVOKE.GSM_getInstance();
    GSM ret = (cPtr == global::System.IntPtr.Zero) ? null : new GSM(cPtr, false);
    return ret;
  }

}

}
