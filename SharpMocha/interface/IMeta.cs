/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class IMeta : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IMeta(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(IMeta obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

	public global::System.Runtime.InteropServices.HandleRef get_CPtr() {
		return swigCPtr;
	}

	public static global::System.Runtime.InteropServices.HandleRef get_static_CPtr(IMeta obj) {
		return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
	}
	
	public IMeta m_castedSource;

	public bool IsKindOf<T>() where T : IMeta
	{
		// Use your C++ RTTI system to test if this wrapped C# object's
		// native object is a 'typeof(T).Name'
		return (typeof(T).Name == this.mytoplevelname());
	}

	public override bool Equals(object o) {
		if (!(o is IMeta))
			return false;
		return this.swigCPtr.Handle == ((IMeta)o).swigCPtr.Handle;
	}

	public override int GetHashCode()
	{
		return this.swigCPtr.Handle.ToInt32();
	}
	//public event PropertyChangedEventHandler PropertyChanged;

  public string mytoplevelname() {
    string ret = SharpMochaPINVOKE.IMeta_mytoplevelname(swigCPtr);
    return ret;
  }

  public uint mytopid() {
    uint ret = SharpMochaPINVOKE.IMeta_mytopid(swigCPtr);
    return ret;
  }

  public static uint gettopid() {
    uint ret = SharpMochaPINVOKE.IMeta_gettopid();
    return ret;
  }

}

}
