/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class CSound : Component {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CSound(global::System.IntPtr cPtr, bool cMemoryOwn) : base(SharpMochaPINVOKE.CSound_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CSound obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public void PlayIndependentEvent(string eventVenteName, bool loop, int set3D) {
    SharpMochaPINVOKE.CSound_PlayIndependentEvent(swigCPtr, eventVenteName, loop, set3D);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PlayIndependentEventStatic3D(string eventVenteName, MochaVec3 pos, bool loop) {
    SharpMochaPINVOKE.CSound_PlayIndependentEventStatic3D(swigCPtr, eventVenteName, MochaVec3.getCPtr(pos), loop);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetUniqueEvent(string eventVenteName, int set3D) {
    uint ret = SharpMochaPINVOKE.CSound_GetUniqueEvent(swigCPtr, eventVenteName, set3D);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void PlayUniqueEvent(uint eventId, bool loop) {
    SharpMochaPINVOKE.CSound_PlayUniqueEvent__SWIG_0(swigCPtr, eventId, loop);
  }

  public void PlayUniqueEvent(uint eventId, MochaVec3 pos, bool loop) {
    SharpMochaPINVOKE.CSound_PlayUniqueEvent__SWIG_1(swigCPtr, eventId, MochaVec3.getCPtr(pos), loop);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void PauseUniqueEvent(uint eventId) {
    SharpMochaPINVOKE.CSound_PauseUniqueEvent(swigCPtr, eventId);
  }

  public void ResumeUniqueEvent(uint eventId) {
    SharpMochaPINVOKE.CSound_ResumeUniqueEvent(swigCPtr, eventId);
  }

  public void StopUniqueEvent(uint eventId, bool toRelease) {
    SharpMochaPINVOKE.CSound_StopUniqueEvent__SWIG_0(swigCPtr, eventId, toRelease);
  }

  public void StopUniqueEvent(uint eventId) {
    SharpMochaPINVOKE.CSound_StopUniqueEvent__SWIG_1(swigCPtr, eventId);
  }

  public void SetUniqueEventParam(uint eventId, string param, float val) {
    SharpMochaPINVOKE.CSound_SetUniqueEventParam(swigCPtr, eventId, param, val);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetUniqueEventParam(uint eventId, string param) {
    float ret = SharpMochaPINVOKE.CSound_GetUniqueEventParam(swigCPtr, eventId, param);
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool GetUniqueEventIsPlaying(uint eventId) {
    bool ret = SharpMochaPINVOKE.CSound_GetUniqueEventIsPlaying(swigCPtr, eventId);
    return ret;
  }

  public bool GetUniqueEventIsStopped(uint eventId) {
    bool ret = SharpMochaPINVOKE.CSound_GetUniqueEventIsStopped(swigCPtr, eventId);
    return ret;
  }

  public bool GetUniqueEventIsPaused(uint eventId) {
    bool ret = SharpMochaPINVOKE.CSound_GetUniqueEventIsPaused(swigCPtr, eventId);
    return ret;
  }

  public void StopAllGlobalEvents() {
    SharpMochaPINVOKE.CSound_StopAllGlobalEvents(swigCPtr);
  }

  public void StopAllMyEvents(bool toRelease) {
    SharpMochaPINVOKE.CSound_StopAllMyEvents(swigCPtr, toRelease);
  }

  public void ResumeAllMyEvents() {
    SharpMochaPINVOKE.CSound_ResumeAllMyEvents(swigCPtr);
  }

  public void PauseAllMyEvents() {
    SharpMochaPINVOKE.CSound_PauseAllMyEvents(swigCPtr);
  }

}

}
