/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class MochaWindow : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal MochaWindow(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MochaWindow obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~MochaWindow() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          SharpMochaPINVOKE.delete_MochaWindow(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public void ChangeResolution(uint windowW, uint windowH) {
    SharpMochaPINVOKE.MochaWindow_ChangeResolution(swigCPtr, windowW, windowH);
  }

  public void SetFullScreen(bool fullscreen) {
    SharpMochaPINVOKE.MochaWindow_SetFullScreen(swigCPtr, fullscreen);
  }

  public void SetWindowTitle(string title) {
    SharpMochaPINVOKE.MochaWindow_SetWindowTitle(swigCPtr, title);
  }

  public uint GetWindowWidth() {
    uint ret = SharpMochaPINVOKE.MochaWindow_GetWindowWidth(swigCPtr);
    return ret;
  }

  public uint GetSavedResolutionHeight() {
    uint ret = SharpMochaPINVOKE.MochaWindow_GetSavedResolutionHeight(swigCPtr);
    return ret;
  }

  public uint GetSavedResolutionWidth() {
    uint ret = SharpMochaPINVOKE.MochaWindow_GetSavedResolutionWidth(swigCPtr);
    return ret;
  }

  public uint GetWindowHeight() {
    uint ret = SharpMochaPINVOKE.MochaWindow_GetWindowHeight(swigCPtr);
    return ret;
  }

  public uint GetViewportWidth() {
    uint ret = SharpMochaPINVOKE.MochaWindow_GetViewportWidth(swigCPtr);
    return ret;
  }

  public uint GetViewportHeight() {
    uint ret = SharpMochaPINVOKE.MochaWindow_GetViewportHeight(swigCPtr);
    return ret;
  }

  public bool IsFullScreen() {
    bool ret = SharpMochaPINVOKE.MochaWindow_IsFullScreen(swigCPtr);
    return ret;
  }

  public float AspectRatio() {
    float ret = SharpMochaPINVOKE.MochaWindow_AspectRatio(swigCPtr);
    return ret;
  }

  public float FixedAspectRatio() {
    float ret = SharpMochaPINVOKE.MochaWindow_FixedAspectRatio__SWIG_0(swigCPtr);
    return ret;
  }

  public void FixedAspectRatio(float ratio) {
    SharpMochaPINVOKE.MochaWindow_FixedAspectRatio__SWIG_1(swigCPtr, ratio);
  }

  public float GetScreenOffsetX() {
    float ret = SharpMochaPINVOKE.MochaWindow_GetScreenOffsetX(swigCPtr);
    return ret;
  }

  public float GetScreenOffsetY() {
    float ret = SharpMochaPINVOKE.MochaWindow_GetScreenOffsetY(swigCPtr);
    return ret;
  }

  public void Letterboxing(uint newWidth, uint newHeight) {
    SharpMochaPINVOKE.MochaWindow_Letterboxing(swigCPtr, newWidth, newHeight);
  }

  public bool GetFocus() {
    bool ret = SharpMochaPINVOKE.MochaWindow_GetFocus(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_HWND GetHWND() {
    SWIGTYPE_p_HWND ret = new SWIGTYPE_p_HWND(SharpMochaPINVOKE.MochaWindow_GetHWND(swigCPtr), false);
    return ret;
  }

  public uint GetHwndAsInt() {
    uint ret = SharpMochaPINVOKE.MochaWindow_GetHwndAsInt(swigCPtr);
    return ret;
  }

  public MochaWindow() : this(SharpMochaPINVOKE.new_MochaWindow(), true) {
  }

}

}
