/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace MochaInterface {

	using System;
	using System.Runtime.InteropServices;

	//using MochaDotNET;
	//using System.ComponentModel;

public partial class CLight : Component {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal CLight(global::System.IntPtr cPtr, bool cMemoryOwn) : base(SharpMochaPINVOKE.CLight_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(CLight obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  public Color GetDiffuse() {
    Color ret = new Color(SharpMochaPINVOKE.CLight_GetDiffuse(swigCPtr), true);
    return ret;
  }

  public void SetDiffuse(Color val) {
    SharpMochaPINVOKE.CLight_SetDiffuse(swigCPtr, Color.getCPtr(val));
    if (SharpMochaPINVOKE.SWIGPendingException.Pending) throw SharpMochaPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetRange() {
    float ret = SharpMochaPINVOKE.CLight_GetRange(swigCPtr);
    return ret;
  }

  public void SetRange(float val) {
    SharpMochaPINVOKE.CLight_SetRange(swigCPtr, val);
  }

  public float GetSpot() {
    float ret = SharpMochaPINVOKE.CLight_GetSpot(swigCPtr);
    return ret;
  }

  public void SetSpot(float val) {
    SharpMochaPINVOKE.CLight_SetSpot(swigCPtr, val);
  }

  public float GetAtt() {
    float ret = SharpMochaPINVOKE.CLight_GetAtt(swigCPtr);
    return ret;
  }

  public void SetAtt(float val) {
    SharpMochaPINVOKE.CLight_SetAtt(swigCPtr, val);
  }

  public int GetLightType() {
    int ret = SharpMochaPINVOKE.CLight_GetLightType(swigCPtr);
    return ret;
  }

  public void SetLightType(CLight.LIGHTTYPE val) {
    SharpMochaPINVOKE.CLight_SetLightType(swigCPtr, (int)val);
  }

  public Color mDiffuse {
    set {
      SharpMochaPINVOKE.CLight_mDiffuse_set(swigCPtr, Color.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.CLight_mDiffuse_get(swigCPtr);
      Color ret = (cPtr == global::System.IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public float mRange {
    set {
      SharpMochaPINVOKE.CLight_mRange_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CLight_mRange_get(swigCPtr);
      return ret;
    } 
  }

  public float mAtt {
    set {
      SharpMochaPINVOKE.CLight_mAtt_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CLight_mAtt_get(swigCPtr);
      return ret;
    } 
  }

  public float mInnerAngle {
    set {
      SharpMochaPINVOKE.CLight_mInnerAngle_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CLight_mInnerAngle_get(swigCPtr);
      return ret;
    } 
  }

  public float mOuterAngle {
    set {
      SharpMochaPINVOKE.CLight_mOuterAngle_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CLight_mOuterAngle_get(swigCPtr);
      return ret;
    } 
  }

  public float mSpot {
    set {
      SharpMochaPINVOKE.CLight_mSpot_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CLight_mSpot_get(swigCPtr);
      return ret;
    } 
  }

  public float mIntensity {
    set {
      SharpMochaPINVOKE.CLight_mIntensity_set(swigCPtr, value);
    } 
    get {
      float ret = SharpMochaPINVOKE.CLight_mIntensity_get(swigCPtr);
      return ret;
    } 
  }

  public CLight.LIGHTTYPE mLightType {
    set {
      SharpMochaPINVOKE.CLight_mLightType_set(swigCPtr, (int)value);
    } 
    get {
      CLight.LIGHTTYPE ret = (CLight.LIGHTTYPE)SharpMochaPINVOKE.CLight_mLightType_get(swigCPtr);
      return ret;
    } 
  }

  public MochaVec3 mLightDir {
    set {
      SharpMochaPINVOKE.CLight_mLightDir_set(swigCPtr, MochaVec3.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = SharpMochaPINVOKE.CLight_mLightDir_get(swigCPtr);
      MochaVec3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new MochaVec3(cPtr, false);
      return ret;
    } 
  }

  public enum LIGHTTYPE {
    DIRECTIONAL,
    POINT,
    SPOTLIGHT
  }

}

}
